name: Dev Branch - Security & Quality Checks

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  security-and-quality-checks:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: npm ci

      # 4Ô∏è‚É£ Security vulnerability scan
      - name: NPM Security Audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found but continuing..."
          npm audit --json > audit-results.json || true

      # 5Ô∏è‚É£ Check for malicious packages
      - name: Check Package Integrity
        run: |
          echo "üõ°Ô∏è Checking package integrity..."
          npm ls --production || echo "Checking dependencies..."

      # 6Ô∏è‚É£ Dependency vulnerability check with Snyk (Optional)
      - name: Snyk Security Scan
        continue-on-error: true
        run: |
          npx snyk test --severity-threshold=high || echo "‚ö†Ô∏è Snyk scan completed with warnings"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 7Ô∏è‚É£ ESLint - Code quality & security patterns
      - name: ESLint Check
        run: |
          echo "üîç Running ESLint..."
          npx eslint "components/**/*.{ts,tsx,js,jsx}" "app/**/*.{ts,tsx,js,jsx}" --max-warnings=0 || {
            echo "‚ùå ESLint found issues"
            exit 1
          }

      # 8Ô∏è‚É£ Prettier - Code formatting check
      - name: Prettier Check
        run: |
          echo "üíÖ Running Prettier..."
          npx prettier --check "components/**/*.{ts,tsx,js,jsx,json,css,scss,md}" "app/**/*.{ts,tsx,js,jsx,json,css,scss,md}" || {
            echo "‚ùå Prettier formatting issues found"
            exit 1
          }

      # 9Ô∏è‚É£ TypeScript type checking
      - name: TypeScript Check
        run: |
          echo "üìò Running TypeScript check..."
          npx tsc --noEmit || {
            echo "‚ùå TypeScript errors found"
            exit 1
          }

      # üîü Run unit tests
      - name: Run Tests
        run: |
          echo "üß™ Running tests..."
          npm test || {
            echo "‚ùå Tests failed"
            exit 1
          }

      # 1Ô∏è‚É£1Ô∏è‚É£ Build verification
      - name: Build Project
        run: |
          echo "üèóÔ∏è Building project..."
          npm run build || {
            echo "‚ùå Build failed"
            exit 1
          }

      # 1Ô∏è‚É£2Ô∏è‚É£ Check for sensitive data leaks
      - name: Scan for Secrets
        run: |
          echo "üîê Scanning for exposed secrets..."
          if grep -r "AKIA" . --exclude-dir=node_modules; then echo "‚ö†Ô∏è Possible AWS key found"; exit 1; fi
          if grep -r "sk-" . --exclude-dir=node_modules | grep -v "package-lock"; then echo "‚ö†Ô∏è Possible API key found"; exit 1; fi
          if grep -r "AIza" . --exclude-dir=node_modules; then echo "‚ö†Ô∏è Possible Google API key found"; exit 1; fi
          echo "‚úÖ No obvious secrets detected"

      # 1Ô∏è‚É£3Ô∏è‚É£ Generate security report
      - name: Security Summary
        if: always()
        run: |
          echo "## üõ°Ô∏è Security & Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dependency audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Type checking passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build successful" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Secret scan completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ú® Ready to merge to main branch!" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed. You can now merge this to main branch for production deployment." >> $GITHUB_STEP_SUMMARY

      # 1Ô∏è‚É£4Ô∏è‚É£ Upload artifacts for review
      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: out/
          retention-days: 5
